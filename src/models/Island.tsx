/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useGLTF } from '@react-three/drei'
import { a } from '@react-spring/three'
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import isLandScene from '../assets/3d/island.glb'
import { useCallback, useEffect, useRef } from 'react'
import { IIsland } from '../types'
import { useFrame, useThree } from '@react-three/fiber'
import { Group, Object3DEventMap } from 'three'

const Island: React.FC<IIsland> = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}) => {
  const { nodes, materials } = useGLTF(isLandScene)

  const isLandRef = useRef<Group<Object3DEventMap> | null>(null)

  const { gl, viewport } = useThree()
  const lastX = useRef(0)
  const rotationSpeed = useRef(0)
  const dampingFactor = 0.95
  // Handle pointer (mouse or touch) down event
  const handlePointerDown = useCallback(
    (e: PointerEvent | TouchEvent) => {
      e.stopPropagation()
      e.preventDefault()
      setIsRotating(true)

      // Use type assertion to tell TypeScript that you expect e to be a TouchEvent
      const clientX =
        'touches' in e ? (e as TouchEvent).touches[0].clientX : e.clientX

      // Store the current clientX position for reference
      lastX.current = clientX
    },
    [setIsRotating],
  )

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = useCallback(
    (e: PointerEvent | TouchEvent) => {
      e.stopPropagation()
      e.preventDefault()
      setIsRotating(false)
    },
    [setIsRotating],
  )
  // Handle pointer (mouse or touch) move event
  const handlePointerMove = useCallback(
    (e: PointerEvent | TouchEvent) => {
      e.stopPropagation()
      e.preventDefault()
      if (isRotating) {
        // If rotation is enabled, calculate the change in clientX position
        const clientX = (e as TouchEvent).touches
          ? (e as TouchEvent).touches[0].clientX
          : (e as PointerEvent).clientX

        // calculate the change in the horizontal position of the mouse cursor or touch input,
        // relative to the viewport's width
        const delta = (clientX - lastX.current) / viewport.width
        // Update the island's rotation based on the mouse/touch movement
        if (!isLandRef.current) return
        isLandRef.current.rotation.y += delta * 0.01 * Math.PI
        // Update the reference for the last clientX position
        lastX.current = clientX
        // Update the rotation speed
        rotationSpeed.current = delta * 0.01 * Math.PI
      }
    },
    [isRotating, viewport.width],
  )
  const handleKeyDown = useCallback(
    (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft') {
        if (!isRotating) setIsRotating(true)
        if (!isLandRef.current) return
        isLandRef.current.rotation.y += Math.PI * 0.01
        rotationSpeed.current = 0.0125
      } else if (e.key === 'ArrowRight') {
        if (!isRotating) setIsRotating(true)
        if (!isLandRef.current) return
        isLandRef.current.rotation.y -= Math.PI * 0.01
        rotationSpeed.current = -0.0125
      }
    },
    [isRotating, setIsRotating],
  )
  const handleKeyUp = useCallback(
    (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') setIsRotating(false)
    },
    [setIsRotating],
  )
  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor
      if (Math.abs(rotationSpeed.current) < 0.001) rotationSpeed.current = 0
    } else {
      // When rotating, determine the current stage based on island's orientation
      if (!isLandRef.current) return
      const rotation = isLandRef.current.rotation.y

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI)

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4)
          break
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3)
          break
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2)
          break
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1)
          break
        default:
          setCurrentStage(null)
      }
    }
  })

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement
    canvas.addEventListener('pointerdown', handlePointerDown)
    canvas.addEventListener('pointerup', handlePointerUp)
    canvas.addEventListener('pointermove', handlePointerMove)
    window.addEventListener('keydown', handleKeyDown)
    window.addEventListener('keyup', handleKeyUp)

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown)
      canvas.removeEventListener('pointerup', handlePointerUp)
      canvas.removeEventListener('pointermove', handlePointerMove)
      window.removeEventListener('keydown', handleKeyDown)
      window.removeEventListener('keyup', handleKeyUp)
    }
  }, [
    gl,
    handlePointerDown,
    handlePointerUp,
    handlePointerMove,
    handleKeyDown,
    handleKeyUp,
  ])

  return (
    <a.group {...props} ref={isLandRef}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

export default Island
